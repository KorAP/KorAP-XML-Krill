<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="text.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<raw_text docid="NGAFC_B14.00010" xmlns="http://ids-mannheim.de/ns/KorAP">
  <metadata file="metadata.xml" />
  <text>Thomas Kaiser  [_DELETEDEMAIL_]  wrote:  [_DELETEDQUOTE_]  So sehr Du mir sonst von der Seele schreibst (auch mit dem Rest Deines Textes hier in diesem Posting, den ich – zustimmend – weggekürzt habe), hier liegst Du falsch*. Tatsächlich denke ich, dass Gute Software™ nur dadurch bestehen kann, dass sie /innen/ dem KISS principle folgt, während sie /nach/ /aussen/ hin alle Komplexität für den User verbirgt, indem sie ihre /Schnittstelle/ (denn auch UI ist Interface) in der Sprache der Nutzer und deren Denkmodell modelliert. Das kann dann einfach sein zu implementieren, es kann auch hochkomplex sein – die Abbildung ins System innen. Denn je nachdem, ob das Modell, das die Nutzer im Kopf haben, mit dem technischen Modell gut übereinstimmt, oder ob die beiden strukturell völlig different sind, wird die Abbildung selbst billig oder komplex. Und so designe ich meine eigene Software dann auch: innen KISS, dann eine Abbildung in die Welt (im Sinne der MWT**) der Anwender, und da hinein referenzierend das Modell, in dem die UI liegt – ein Modell, das wie gesagt der Sprache der Nutzer möglichst nahe kommt. Interessant übrigens dabei (für diejenigen, die sich für Mögliche-Welten-Theorie, Sprachen- und Modelltheorie interessieren): es genügt nicht, ein passendes Modell zu finden, sondern man muss sich gar auf die Vorstellung, sprich: die /Welt/ der Benutzer einlassen. Wer das verwirrend findet, dass ich über KISS spreche, und dann doch über Komplexität: der Widerspruch ist nur scheinbar. Denn aus der Kombination der Einfachen Dinge™ entsteht gerade die Komplexität. Deshalb ist es trotzdem höchst sinnvoll, Software über Kombination von Einfachem zu implementieren, also dem KISS-Prinzip zu folgen – oder vielmehr, gerade deswegen ist es sinnvoll. Und da kommt die Genialität des Unix-Prinzips auch her. Denn es ist durchwegs KISS. KISS hat nur immer dort Grenzen, wo das einfache Modell nicht mehr treffend in die Welt (Vorstellung) referenziert, wo also die Kombination komplex sein muss, um einen Begriff zu treffen. Jeder, der bei Unix Dinge braucht, die sich nur schlecht mit dem Datei-Begriff vereinbaren lassen, weiss wovon ich hier spreche. Sprachen- und Modelltheorie kann einem helfen zu verstehen, wo das sein muss (und was man dann tun kann). X'Post + F'up in passende Gruppe gesetzt. Viele Grüsse, VB. * Recht hast Du auch hier, weil Techis üblicherweise das Problem  ignorieren, sobald es /für/ /sie/ funktioniert. Sie kümmern die  Anwender nicht. Mein Widerspruch bezieht sich auf die Interpretation  Deines Textes, KISS wäre etwa nicht sinnvoll in der Technik, sonst  Teile ich auch hier Deine Kritik. Möglicherweise hast Du das nicht  gemeint, Dein Text legt allerdings nahe, ihn so auszulegen. **  [_DELETEDWWWURL_]</text>
</raw_text>